<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <if condition='isDefined("catalina.base")'>
        <then>
            <property name="LOG_HOME" value="${catalina.base}/logs"/>
        </then>
        <else>
            <property name="LOG_HOME" value="./target/logs"/>
        </else>
    </if>

    <springProperty scope="context" name="springAppName" source="spring.application.name" defaultValue="id-photo"/>

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <property name="LOG_PATTERN"
              value="%clr(%green(%d{yyyy-MM-dd HH:mm:ss.SSS})){faint} %highlight(%p) %cyan(%clr([${springAppName:-},%X{X-B3-TraceId:-},%X{X-B3-SpanId:-},%X{X-Span-Export:-}])){yellow} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

    <appender class="ch.qos.logback.core.ConsoleAppender" name="STDOUT">
        <!-- encoder 默认配置为PatternLayoutEncoder -->
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="INFO">
        <file>${LOG_HOME}/sys.log</file>
        <!-- 只输出level级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/sys.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <maxFileSize>2GB</maxFileSize>
            <totalSizeCap>30GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender class="ch.qos.logback.classic.AsyncAppender" name="ASYNC_INFO">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>64</discardingThreshold>
        <!-- 更改默认的队列的大小,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--提取调用者数据,默认为false-->
        <includeCallerData>true</includeCallerData>
        <neverBlock>true</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="INFO"/>
    </appender>

    <!--error级别以上日志-->
    <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="ERROR">
        <file>${LOG_HOME}/error.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 只输出level级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!--日志按天备份-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
    </appender>

    <!-- 异步输出 -->
    <appender class="ch.qos.logback.classic.AsyncAppender" name="ASYNC_ERROR">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>64</discardingThreshold>
        <!-- 更改默认的队列的大小,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--提取调用者数据,默认为false-->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="ERROR"/>
    </appender>

    <appender name="SLOW" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/slow.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/logs/slow-sql.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name ="ASYNC_SLOW" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>64</discardingThreshold>
        <!-- 更改默认的队列的大小,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--提取调用者数据,默认为false-->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="SLOW"/>
    </appender>

    <logger name="com.alibaba.druid.filter.stat.StatFilter" level="ERROR" additivity="false">
        <appender-ref ref="ASYNC_SLOW"/>
    </logger>

    <!--关于springProfile就不要更改了.如果自己实在有需要.就新建一个profile.比如自己的名字.然后建立相关的application-XXX.yml即可-->
    <root level="INFO">
        <!-- 本地不需要log文件 -->
        <springProfile name="dev">
            <appender-ref ref="STDOUT"/>
        </springProfile>

        <!-- 服务器上不需要输出到控制台 -->
        <springProfile name="prod">
            <appender-ref ref="ASYNC_INFO"/>
            <appender-ref ref="ASYNC_ERROR"/>
        </springProfile>
    </root>
</configuration>